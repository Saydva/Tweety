Swagger Implementacia -- 


# TODO: Prechod z axios na OpenAPI (Swagger) generovaného klienta v projekte Tweety

## 1. Príprava backendu a OpenAPI špecifikácie
[√] Over, že backend poskytuje aktuálnu Swagger/OpenAPI špecifikáciu (napr. na `http://localhost:3000/api-json` alebo podobnom endpointe).
[√] Skontroluj, že všetky dôležité endpointy pre tweety sú v špecifikácii správne popísané (GET, POST, DELETE, PATCH...).
[ ] Ak v špecifikácii niečo chýba alebo má zlé typy, uprav backend podľa potreby a reštartuj server.

## 2. Generovanie OpenAPI klienta vo frontende
[√] Ak ešte nemáš, nainštaluj si OpenAPI generator CLI:
  ```bash
  npm install @openapitools/openapi-generator-cli -D
  ```
[√] V koreňovom adresári frontend projektu spusti:
  ```bash
  npx @openapitools/openapi-generator-cli generate -i http://localhost:3000/api-json -g typescript-axios -o ./src/api
  ```
  - `-i` = cesta k OpenAPI špecifikácii.
  - `-g typescript-axios` = vygeneruje typovo bezpečný klient s axios pod kapotou.
  - `-o ./src/api` = export klienta do zložky `src/api`.
[√] Skontroluj, že v `src/api` pribudli súbory (napr. `apis`, `models`, `configuration.ts`...).

## 3. Refaktoring: Nahradenie axios za OpenAPI klienta
[√] Vyhľadaj v projekte všetky importy a použitia `axios` (aj cez `ctrl+shift+f` alebo grep).
[√] Identifikuj všetky služby, hooky, utils alebo komponenty, kde sa axios používa pre prácu s tweetmi (čítanie, vytváranie, mazanie, úprava).
[√] Namiesto axios importuj a používaj entity z generovaného klienta, napr.:
  ```typescript
  import { TweetsApi, Configuration } from "../api";
  const api = new TweetsApi(new Configuration({ basePath: "http://localhost:3000" }));
  ```
[√] Pre každú akciu (get, create, delete, update):
    [√] Nahraď axios volanie za príslušnú funkciu z klienta, napr.:
      ```typescript
      // predtým
      axios.get("/api/tweets")
      // potom
      api.getAllTweets()
      ```
    [√] Skontroluj, či nový klient vracia dáta v rovnakom tvare (typicky budeš používať `.data`).
    [√] Ak máš vlastné hooky (napr. `useTweets`, `useCreateTweet`), uprav ich implementáciu.

## 4. Úprava typov a modelov vo fronte
[√] Ak si mal vlastné typy pre tweety, môžeš ich nahradiť/rozšíriť tými z generovaného klienta (`TweetDto`, `Tweet`, atď.).
[√] Skontroluj výskyt použitia starých typov a uprav importy podľa potreby.

## 5. Otestovanie funkcionality
[√] Otestuj načítanie tweetov, pridávanie, mazanie, úpravu aj detail.
[√] Over správnosť typov, automatické dopĺňanie v editore, návratové hodnoty a chybové hlášky.
[√] Skontroluj, že nikde v projekte už nie je žiadny priamy import/kód s axiosom.

## 6. Aktualizácia klienta pri zmene backendu
[√] Ak zmeníš API v backend projekte (pribudne endpoint, zmení sa typ), vždy znova spusti generovanie klienta (krok 2).

## 7. Dokumentácia
[ ] Do README alebo interného dokumentu pridaj krátky návod:
    - Ako generovať OpenAPI klienta.
    - Ako používať klienta namiesto axiosu.
    - Ako aktualizovať klienta pri zmene backendu.
    - Príklad použitia v kóde.

---

**Poznámka:**  
Po tejto migrácii budeš mať v projekte plne typovo bezpečné volania REST API bez potreby vlastných axios requestov – stačí použiť generované funkcie podľa OpenAPI/Swagger definície.

skontrolujme cely kod ci sme pozili swagger typescrip vsade kde sa len da

Z kontroly kódu vyplýva:

Swagger-typescript-api klient (Api z ./api/generated/api) sa používa v App.tsx a typ Tweety v useTweetStore.ts.
V iných častiach projektu (napr. useAddTweet.ts, api.auth.ts, common.ts, atď.) sa stále používajú staré custom API volania, typy z axiosu alebo ručne písané API utility.
Čo treba spraviť pre plné využitie swagger-typescript-api:

Všetky API volania (pridávanie tweetu, login, registrácia, atď.) refaktorovať na použitie vygenerovaného klienta z ./api/generated/api.
Odstrániť/zredukovať závislosti na axios, custom typoch a ručne písaných API helperoch.
Všade, kde sa pracuje s dátami z API, používať typy z vygenerovaného klienta.
Ak chcete, môžem začať refaktorovať konkrétny súbor (napr. useAddTweet.ts alebo api.auth.ts) na použitie swagger-typescript-api. Stačí napísať, ktorý súbor chcete upraviť ako prvý!

25.9.20025

skontroluj cely kod fronend aj beckend ako som implementoval swagger-typescript

Tu je stručný checklist a odporúčania na kontrolu správnej implementácie swagger-typescript-api v celom tvojom projekte:

Backend (NestJS)
Správne:

Všetky DTO majú dekorátory @ApiProperty.
Kontroléry používajú @ApiBody, @ApiResponse, @ApiOperation s presnými typmi (napr. LoginDto pre vstup, LoginResponseDto pre výstup).
Swagger endpoint je dostupný (napr. /api-json).
Po každej zmene v DTO/kontroléri reštartuješ server a vygeneruješ nový OpenAPI JSON.
Najčastejšie chyby:

Zle nastavený typ v @ApiResponse (napr. namiesto LoginResponseDto je tam LoginDto).
Chýbajúce alebo nepresné dekorátory v DTO.
Endpointy vracajú any alebo object namiesto konkrétneho DTO.
Frontend (React)
Správne:

Všetky API volania idú cez vygenerovaného klienta z @/api/generated/api (trieda Api).
Nepoužívaš custom axios/fetch utility ani custom typy pre API odpovede.
Typy pre dáta (napr. LoginResponseDto, TweetyResponseDto) importuješ priamo z vygenerovaného klienta.
Pri login/registrácii/pridávaní tweetu používaš správne typy podľa OpenAPI (napr. LoginDto pre vstup, LoginResponseDto pre výstup).
Všetky tokeny a user info synchronizuješ s localStorage (pre zachovanie stavu po refreshi).
Najčastejšie chyby:

Používanie response.data tam, kde vrátený objekt je už správne typovaný (stačí response._id atď.).
Nesprávne typovanie v hookoch alebo store (napr. použitie any).
Zvyšky starých custom API helperov alebo axios importov.
Čo ešte skontrolovať:
Backend:

Každý endpoint má správne typované vstupy/výstupy v dekorátoroch.
Swagger UI zobrazuje presné schémy.
Frontend:

Všetky API volania sú cez vygenerovaného klienta.
Všade používate typy z generovaného API.
Všetky hooky/store synchronizujú stav s localStorage.