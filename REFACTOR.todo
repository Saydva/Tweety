# REFACTOR TODO - Tweety Project

## üö® KRITICK√â CHYBY (Vysok√° priorita - opravi≈• okam≈æite)

### Backend (NestJS)
- [ ] **PR√ÅZDNA FUNKCIA getTweetyById** (tweety.controller.ts:28)
  - Endpoint je definovan√Ω ale pr√°zdny
  - M√¥≈æe sp√¥sobi≈• 500 chybu pri volan√≠ GET /tweety/:id
  - Rie≈°enie: Implementova≈• return this.tweetyService.getTweetyById(id)

- [ ] **NEKONZISTENTN√â ERROR HANDLING** (auth.service.ts)
  - Rovnak√© chyby maj√∫ rovnak√∫ spr√°vu "Wrong credentials"
  - Rie≈°enie: Rozl√≠≈°i≈• medzi "User not found" a "Invalid password"

- [ ] **PORT KONFLIKT** (main.ts vs .env)
  - .env m√° PORT=4000, ale fallback v main.ts je 3000
  - Rie≈°enie: Zjednoti≈• na 4000 alebo pou≈æi≈• process.env.PORT

- [ ] **NEKONZISTENTN√Å EXPIR√ÅCIA TOKENOV** (auth-refresh.service.ts)
  - Refresh tokeny maj√∫ nastaven√∫ expir√°ciu na 30 min√∫t, ale access tokeny nemaj√∫ explicitne nastaven√∫ dobu
  - V JWT konfigur√°cii je nastaven√© `expiresIn: '1h'`, ale nie je pou≈æit√© konzistentne
  - Rie≈°enie: Zabezpeƒçi≈• konzistentn√© nastavenie expir√°cie pre v≈°etky tokeny

- [ ] **CH√ùBAJ√öCA CSRF OCHRANA** (auth endpointy)
  - Ch√Ωba implement√°cia CSRF tokenov pre citliv√© oper√°cie
  - Rie≈°enie: Implementova≈• CSRF ochranu pre autentifikaƒçn√© endpointy

### Frontend (React)
- [ ] **CH√ùBAJ√öCI AWAIT** (useSignUp.ts:17)
  - signup(name, email, password) nem√° await
  - Funkcia sa nevykon√° spr√°vne
  - Rie≈°enie: Prida≈• await signup(name, email, password)

- [ ] **NE√öPLN√â DEPENDENCY ARRAYS** (App.tsx useEffect)
  - useEffect m√° ch√Ωbaj√∫ce dependencies
  - Rie≈°enie: Prida≈• getUserInfo, setId, setName, setIsLoggedIn do dependency array

- [ ] **NEO≈†ETREN√â CHYBY V USEEFFECT** (App.tsx)
  - Catch blok len loguje, u≈æ√≠vateƒæ nev√≠ o chybe
  - Rie≈°enie: Prida≈• user-friendly error handling

- [ ] **PROBL√âM S ASYNCHR√ìNNYM STAVOM** (useAddTweet.ts)
  - Pri viacer√Ωch r√Ωchlych po≈æiadavk√°ch m√¥≈æe d√¥js≈• ku race condition
  - Rie≈°enie: Pou≈æi≈• funkƒçn√Ω update pattern (`setTweetList(prev => [...prev, newTweet])`)

- [ ] **NEBEZPEƒåN√â UKLADANIE ACCESS TOKENU** (auth.store.ts)
  - JWT tokeny v localStorage bez dodatoƒçnej ochrany
  - Rie≈°enie: Pou≈æi≈• httpOnly cookies (backend) alebo implementova≈• token refresh mechanizmus

- [ ] **NEDOSTATOƒåN√Å XSS OCHRANA** (Tweet.tsx)
  - Ch√Ωba sanit√°cia obsahu tweetov pred zobrazen√≠m
  - Rie≈°enie: Implementova≈• sanit√°ciu textov√©ho obsahu

## ‚ö†Ô∏è STREDN√â PROBL√âMY (Stredn√° priorita)

### Bezpeƒçnos≈•
- [ ] **HARDCODED URLs** (axios.auth.ts, _tweetsAxios.ts)
  - http://localhost:4000 je hardcoded
  - Rie≈°enie: Pou≈æi≈• environment variables (REACT_APP_API_URL)

- [ ] **NEVHODN√â ALERT()** (axios.auth.ts)
  - alert() je zl√© UX
  - Rie≈°enie: Nahradi≈• toast notifik√°ciami alebo proper error handling

### Valid√°cia a Typy
- [ ] **CH√ùBAJ√öCA VALID√ÅCIA ID** (tweety.controller.ts)
  - Param validation nie je konzistentn√°
  - Rie≈°enie: Prida≈• @IsMongoId() dekor√°tor

- [ ] **TYPOV√Å BEZPEƒåNOS≈§** (viacer√© s√∫bory)
  - Pou≈æ√≠vanie 'any' typov
  - Rie≈°enie: Definov–∞—Ç—å proper interfaces a types

## ‚ö° MEN≈†IE PROBL√âMY (N√≠zka priorita)

### Code Quality
- [ ] **DUPLICITN√ù K√ìD** 
  - Axios in≈°tancie sa vytv√°raj√∫ na viacer√Ωch miestach
  - Rie≈°enie: Centralizova≈• do api.config.ts

- [ ] **NEPOU≈ΩIT√â IMPORTY**
  - useNavigateTo v axios.auth.ts nie je pou≈æit√©
  - Rie≈°enie: Odstr√°ni≈• alebo pou≈æi≈•

- [ ] **CONSOLE.LOG V PRODUKCII** (App.tsx:42)
  - Debug logy v produkƒçnom k√≥de
  - Rie≈°enie: Odstr√°ni≈• alebo pou≈æi≈• proper logging

### Performance
- [ ] **CH√ùBAJ√öCE LAZY LOADING**
  - Komponenty sa loaduj√∫ v≈°etky naraz
  - Rie≈°enie: Implementova≈• React.lazy() pre routes

- [ ] **CH√ùBAJ√öCE ERROR BOUNDARIES**
  - ≈Ωiadne error boundaries v React app
  - Rie≈°enie: Prida≈• ErrorBoundary komponenty

## üîß REFACTORING PR√çLE≈ΩITOSTI

### Architekt√∫ra
- [ ] **CENTRALIZ√ÅCIA TOKEN LOGIKY**
  - AuthService a AuthRefreshService maj√∫ duplicitn√∫ logiku
  - Rie≈°enie: Vytvori≈• TokenService

- [ ] **REPOSITORY PATTERN**
  - Priamy pr√≠stup k Mongoose modelom
  - Rie≈°enie: Implementova≈• Repository pattern

- [ ] **GLOBAL ERROR FILTER**
  - Ch√Ωba centralizovan√© error handling
  - Rie≈°enie: Vytvori≈• GlobalExceptionFilter

### State Management
- [ ] **ZLEP≈†ENIE ZUSTAND STORES**
  - Ch√Ωbaj√∫ca typov√° bezpeƒçnos≈• v actions
  - Rie≈°enie: Prida≈• proper typing pre store actions

- [ ] **PERSISTENT STATE**
  - User state sa str√°ca pri refresh
  - Rie≈°enie: Implementova≈• persist middleware

### Testing
- [ ] **CH√ùBAJ√öCE TESTY**
  - ≈Ωiadne unit/integration testy
  - Rie≈°enie: Prida≈• Jest testy pre kritick√© funkcie

## üìã PRIORITN√ù PL√ÅN REFAKTORINGU

### T√Ω≈æde≈à 1: Kritick√© chyby
1. Opravi≈• getTweetyById endpoint
2. Prida≈• await do signup
3. Opravi≈• error handling v useEffect
4. Zjednoti≈• port configuration
5. Implementova≈• CSRF ochranu
6. Opravi≈• expir√°ciu tokenov
7. Implementova≈• XSS ochranu

### T√Ω≈æde≈à 2: Bezpeƒçnos≈• a UX
1. Environment variables pre URLs
2. Nahradi≈• alert() proper error handling
3. Zlep≈°i≈• error messages
4. Bezpeƒçnej≈°ie ukladanie JWT tokenov
5. Opravi≈• asynchr√≥nne aktualiz√°cie stavov

### T√Ω≈æde≈à 3: Code quality
1. Centralizova≈• Axios konfigur√°ciu
2. Odstr√°ni≈• duplicitn√Ω k√≥d
3. Zlep≈°i≈• typov√∫ bezpeƒçnos≈•

### T√Ω≈æde≈à 4: Performance a architekt√∫ra
1. Lazy loading
2. Error boundaries
3. Token service refactor

## üìù POZN√ÅMKY
- Pred ka≈æd√Ωm refaktoringom prida≈• testy
- Refaktorova≈• po mal√Ωch ƒçastiach
- V≈ædy testova≈• po ka≈ædej zmene
- Udr≈æiava≈• backward compatibility